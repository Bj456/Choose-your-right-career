import streamlit as st
import pandas as pd

# CSV рд▓реЛрдб рдХрд░реЗрдВ
@st.cache_data
def load_data():
    df = pd.read_csv("career_dataset_hindi.csv", header=0)  # Ensure the first row is treated as header
    df.columns = df.columns.str.strip()   # ЁЯЯв рдХреЙрд▓рдо рд╣реЗрдбрд░ рд╕реЗ extra spaces рд╣рдЯрд╛рдУ
    return df

df = load_data()

# Debugging рдХреЗ рд▓рд┐рдП рдХреЙрд▓рдо рд▓рд┐рд╕реНрдЯ рджрд┐рдЦрд╛рдПрдБ
st.write("ЁЯУВ CSV Columns:", df.columns.tolist())

# --- Streamlit App UI ---
st.set_page_config(page_title="Career Guide App", layout="wide")

st.title("ЁЯОУ рдХрд░рд┐рдпрд░ рдЧрд╛рдЗрдб рдРрдк (рднрд╛рд░рдд)")
st.write("ЁЯСЙ рдЗрд╕ рдРрдк рдХреА рдорджрдж рд╕реЗ рдЖрдк 10рд╡реАрдВ, 12рд╡реАрдВ рдФрд░ рдЧреНрд░реЗрдЬреБрдПрд╢рди рдХреЗ рдмрд╛рдж рдЙрдкрд▓рдмреНрдз рдХрд░рд┐рдпрд░ рд╡рд┐рдХрд▓реНрдк рджреЗрдЦ рд╕рдХрддреЗ рд╣реИрдВред")

# Level Filter
level_options = df["Level"].unique()
selected_level = st.selectbox("ЁЯУМ рдХрдХреНрд╖рд╛ рдЪреБрдиреЗрдВ:", sorted(level_options))

# Interest Filter
interest_options = df[df["Level"] == selected_level]["Interest"].unique()
selected_interest = st.selectbox("ЁЯОп рд░реВрдЪрд┐ рдХрд╛ рдХреНрд╖реЗрддреНрд░ рдЪреБрдиреЗрдВ:", sorted(interest_options))

# Filter Data
filtered_df = df[(df["Level"] == selected_level) & (df["Interest"] == selected_interest)]

# Display Results
if not filtered_df.empty:
    for idx, row in filtered_df.iterrows():
        with st.container():
            st.subheader(f"ЁЯУШ {row['Course_Name']}")
            st.write(f"**рдХрд░рд┐рдпрд░ рд╡рд┐рдХрд▓реНрдк:** {row['Career_Option']}")
            st.write(f"**рд╡рд┐рд╡рд░рдг:** {row['Description']}")
            st.write(f"**рдкрд╛рддреНрд░рддрд╛ (Eligibility):** {row['Eligibility']}")
            st.write(f"**рдкреНрд░рд╡реЗрд╢ рдкрд░реАрдХреНрд╖рд╛ (Entrance Exam):** {row['Entrance_Exam']}")
            st.write(f"**рдкреНрд░рд╡реЗрд╢ рдорд╛рд╣ (Admission Month):** {row['Admission_Month']}")
            st.write(f"**рд╕рдВрд╕реНрдерд╛рди / рд╡рд┐рд╢реНрд╡рд╡рд┐рджреНрдпрд╛рд▓рдп:** {row['Universities']}")
            if pd.notna(row['Application_Link']) and row['Application_Link'] != "N/A":
                st.markdown(f"[ЁЯФЧ рдЖрд╡реЗрджрди / рд╡реЗрдмрд╕рд╛рдЗрдЯ рджреЗрдЦреЗрдВ]({row['Application_Link']})")
            st.progress(int(row['Match_Percentage']))
            st.divider()
else:
    st.warning("тЭМ рдЗрд╕ рд╢реНрд░реЗрдгреА рдореЗрдВ рдХреЛрдИ рдбреЗрдЯрд╛ рдЙрдкрд▓рдмреНрдз рдирд╣реАрдВ рд╣реИред")
